class Solution {
public:
    int col[12] = {0};
    vector<vector<string>> ans;

    bool cheak(int c, int r) {
        for(int i = 0; i < r; i++) {
            if(col[i] == c || (abs(col[i] - c) == abs(i - r))) return false;
        }
        return true;
    }

    void dfs(int r, int n) {
        if(r == n) {
            vector<string> tmp;
            tmp.clear();
            string s;
            for(int i = 0; i < n; i++){
                s = "";
                for(int j = 0; j < n; j++){
                    if(j != col[i]) s += ".";
                    else s += "Q";
                }
                tmp.push_back(s);
            }
            ans.push_back(tmp);
        }

        for(int c = 0; c < n; c++){
            if(cheak(c, r)){
                col[r] = c;
                dfs(r + 1, n);
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        dfs(0, n);
        return ans;
    }
};